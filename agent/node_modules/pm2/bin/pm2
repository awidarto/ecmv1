#!/usr/bin/env node

var commander = require('commander');
var Monit     = require('../lib/Monit');
var UX        = require('../lib/CliUx');
var Log       = require('../lib/Log');
var Satan     = require('../lib/Satan');
var fs        = require('fs');
var path      = p = require('path');
var cst       = require('../constants.js');
var pkg       = require('../package.json');
var util      = require('util');
var watch     = require('watch');
var cronJob   = require('cron').CronJob;

const PREFIX_MSG        = '\x1B[32m⌬ PM2 \x1B[39m';
const PREFIX_MSG_ERR    = '\x1B[31m⌬ PM2 [ERROR] \x1B[39m';
const SUCCESS_EXIT      = 0;
const ERROR_EXIT        = 1;
const SAMPLE_FILE_PATH  = '../lib/sample.json';
const STARTUP_SCRIPT    = '../lib/scripts/pm2-init.sh';

//console.log();

commander.version(pkg.version)
  .option('-v --verbose', 'Display all data')
  .option('-f --force', 'Force actions')
  .option('-n --name <name>', 'Set a <name> for script')
  .option('-i --instances <number>', 'Launch [number] instances (clustered with same socket)')
  .option('-o --output <path>', 'Out log file output')
  .option('-e --error <path>', 'Error log file output')
  .option('-p --pid <pid>', 'Pid file')
  .option('-c --cron <cron_pattern>', 'Restart a script depending on a cron pattern')
  .option('-w --write', 'Write configuration in local folder')
  .usage('[cmd] app');

//
// Start command
//
commander.command('start <script>')
         .description('start specific part')
         .action(function(cmd) {
  if (cmd.indexOf('.json') > 0)
    CLI.startFromJson(cmd);
  else
    CLI.startFile(cmd);
});

//
// Stop All processes
//
commander.command('stopAll')
         .description('stop all processes')
         .action(function() {
  console.log(PREFIX_MSG + 'Stopping all processes');
  UX.processing.start();
  CLI.stopAll();
});

//
// Stop specific id
//
commander.command('stop <pm2_id|name|all>')
  .description('stop specific process pm2 id or script name (set with --name or script name)')
  .action(function(pm2_id) {    
    UX.processing.start();
    
    if (pm2_id == 'all') {
      CLI.stopAll();
    }
    else if (isNaN(parseInt(pm2_id))) {
      console.log(PREFIX_MSG + 'Stopping process by name ' + pm2_id);
      CLI.stopProcessName(pm2_id);
    } else {
      console.log(PREFIX_MSG + 'Stopping process by id ' + pm2_id);
      CLI.stopId(pm2_id);
    }
  });

//
// Development mode
//
commander.command('dev <script>')
         .description('run script in development mode. Display log and reload files when changes')
         .action(function(script) {
  console.log(PREFIX_MSG + 'Launching development mode');
  CLI.developmentMode(script);
});

//
// Web interface
//
commander.command('web')
         .description('launch process/server monit api on ' + cst.WEB_INTERFACE)
         .action(function() {
  console.log('Launching web interface on port ' + cst.WEB_INTERFACE);
  CLI.web();
});

//
// Save processes to file
//
commander.command('dump')
         .description('dump all processes for resurecting them later')
         .action(function() {
  console.log(PREFIX_MSG + 'Dumping processes');
  UX.processing.start();
  CLI.dump();
});

//
// Save processes to file
//
commander.command('resurrect')
         .description('resurect previously dumped processes')
         .action(function() {
  console.log(PREFIX_MSG + 'Resurrecting');
  UX.processing.start();
  CLI.resurrect();
});

//
// Stop All processes
//
commander.command('restart <pm2_id|name|all>')
  .description('restart specific process pm2 id')
  .action(function(pm2_id) {
    console.log(PREFIX_MSG + 'Restarting process ' + pm2_id);
    UX.processing.start();
    if (pm2_id == 'all') {
      CLI.restartAll();
    }
    else {
      CLI.restart(pm2_id);
    }
  });

//
// Reload process(es)
//
commander.command('reload <pm2_id|all>')
  .description('reload all processes or a specific process pm2 id')
  .action(function(pm2_id) {
    UX.processing.start();
    CLI.reload(pm2_id);
  });

//
// Stop All processes
//
commander.command('restartAll')
         .description('restart all processes')
         .action(function() {
  console.log(PREFIX_MSG + 'Restarting all processes');
  UX.processing.start();
  CLI.restartAll();
});

//
// Set pm2 to startup
//
commander.command('startup [platform]')
         .description('auto resurect process at startup. [platform] can be CentOS, default use update-rc.d')
         .action(function(platform) {
  CLI.upstart(platform);
});


//
// Sample generate
//
commander.command('generate <name>')
         .description('generate sample JSON')
         .action(function(name) {
  CLI.generateSample(name);
});

//
// List command
//
commander.command('list')
         .description('list all processes')
         .action(function() {
  CLI.list();
});

commander.command('status')
  .description('list all processes')
  .action(function() {
    CLI.list();
  });

commander.command('jlist')
         .description('json list all processes')
         .action(function() {
  CLI.jlist();
});

//
// Monitoring command
//
commander.command('monit')
         .description('list all processes')
         .action(function() {
  CLI.monit();
});

//
// Monitoring command
//
commander.command('update')
  .description('update the daemon (after you updated pm2 by doing : npm install pm2@latest -g)')
  .action(function() {
    var exec = require('child_process').exec, child;

    function bind_child(child, cb) {
      child.stdout.on('data', function(data) {
        console.log(data);
      });
      child.stderr.on('data', function(data) {
        console.log(data);
      });
      child.on('exit', function() {
        return cb();
      });
    }

    bind_child(exec('pm2 dump'), function() {
      bind_child(exec('pm2 kill; pm2 resurrect'), function() {
        console.log('resurecting');
        process.exit(SUCCESS_EXIT);
      });
    });
  });

//
// Flushing command
//
commander.command('flush')
         .description('flush logs')
         .action(function() {
  CLI.flush();
});

//
// Log streaming
//
commander.command('logs')
         .description('stream logs file')
         .action(function() {
  CLI.streamLogs();
});


//
// Kill
//
commander.command('kill')
         .description('kill daemon')
         .action(function() {
  CLI.killDaemon();
});

//
// Catch all
//
commander.command('*')
         .action(function() {
  console.log(PREFIX_MSG + '\nCommand not found');
  commander.outputHelp();
  process.exit(ERROR_EXIT);
});

//
// Display help
//
if (process.argv.length == 2) {
  commander.parse(process.argv);
  commander.outputHelp();
  process.exit(ERROR_EXIT);
}

//
// Wait Satan is connected to God to launch parsing
//
process.on('satan:client:ready', function() {
  commander.parse(process.argv);
});

//
// Init
//
(function init() {
  fs.exists(cst.DEFAULT_FILE_PATH, function(exist) {
    if (!exist) {
      fs.mkdirSync(cst.DEFAULT_FILE_PATH);
      fs.mkdirSync(cst.DEFAULT_LOG_PATH);
      fs.mkdirSync(cst.DEFAULT_PID_PATH);
    }
  });
})();


//
//
// CLI Class
//
//
var CLI = module.exports = {};

CLI.startFile = function(script) {
  var appConf = {
    script : script,
    name : p.basename(script, '.js')
  };

  if (commander.name)
    appConf['name']        = commander.name;
  if (commander.instances)
    appConf['instances']   = commander.instances;    
  if (commander.error)
    appConf['fileError']   = commander.error;
  if (commander.output)
    appConf['fileOutput']  = commander.output;
  if (commander.pid)
    appConf['pidFile']     = commander.pid;
  if (commander.cron)
    appConf['cron_restart'] = commander.cron;
  
  // Script arguments
  var opts = commander.rawArgs.indexOf('--') + 1;
  if (opts > 1)
    appConf['args'] = JSON.stringify(commander.rawArgs.slice(opts,
                                                             commander.rawArgs.length));
  
  if (commander.write) {
    var dst_path = path.join(process.env.PWD, path.basename(script, '.js') + '-pm2.json');
    console.log(PREFIX_MSG + 'Writing configuration to ', dst_path);
    fs.writeFileSync(dst_path, JSON.stringify(appConf));
  }
  else {
    console.log(PREFIX_MSG + 'Configuration : ', appConf);
    console.log(PREFIX_MSG + 'You can write the current configuration by adding -w option');
  }

  Satan.executeRemote('findByScript', {script : appConf.script}, function(err, exec) {
      if (exec && !commander.force) {
        console.log(PREFIX_MSG_ERR + 'Script already launched, add -f option to force re execution');
        process.exit(ERROR_EXIT);
      }

    Satan.executeRemote('prepare', resolvePaths(appConf), function() {
        console.log(PREFIX_MSG + 'Process launched');
        speedList();
      });
    });
};

CLI.startFromJson = function(cmd) {
  var data = fs.readFileSync(cmd);
  var appConf = JSON.parse(data);

  if (Array.isArray(appConf)) {
    // Array of JSON, here it's for multiple and different applications
    (function ex(apps) {
      if (!apps[0]) return speedList();
      Satan.executeRemote('prepare', resolvePaths(apps[0]), function() {
        apps.shift();
        return ex(apps);
      });
      return false;
    })(appConf);
  }
  else {
    // Here Standalone application
    Satan.executeRemote('findByScript', {script : appConf.script}, function(err, exec) {
      if (exec && !commander.force) {
        console.log(PREFIX_MSG + 'Script already launched, add -f option to force re execution');
        process.exit(ERROR_EXIT);
      }

      Satan.executeRemote('prepare', resolvePaths(appConf), function() {
        console.log(PREFIX_MSG + 'Process launched');
        speedList();
      });
    });
  }
};

CLI.developmentMode = function(script) {
  var appConf = resolvePaths({
    script : script,
    name : p.basename(script, '.js')
  });

  Satan.executeRemote('prepare', appConf, function(err, proc) {
    console.log(PREFIX_MSG + 'Process launched');
    var jProc = JSON.parse(proc);

    fs.openSync(jProc.opts.pm_out_log_path, 'w');
    fs.openSync(jProc.opts.pm_err_log_path, 'w');

    Log.stream(jProc.opts.pm_out_log_path, p.basename(script, '.js') + ' out');
    Log.stream(jProc.opts.pm_err_log_path, p.basename(script, '.js') + ' err');

    watch.watchTree(p.dirname(jProc.opts.pm_exec_path), {
      'ignoreDotFiles' : true
    }, function(f, curr, prev) {
         console.log(PREFIX_MSG + 'File changed. Reloading.');
         Satan.executeRemote('list', {}, function(err, list) {
           if (err) {
             console.error('Error retrieving process list: ' + err);
             process.exit(ERROR_EXIT);
           }

           list.forEach(function(l) {
             process.kill(l.pid);
           });
         });
       });
  });

  process.on('SIGINT', function() {
    console.log(PREFIX_MSG + 'Exiting development mode, killing pm2 processes');
    UX.processing.start();
    Satan.executeRemote('stop', {}, function(err, list) {
      process.exit(0);
    });
  });
};

CLI.resurrect = function() {
  try {
    fs.existsSync(cst.DUMP_FILE_PATH);
  } catch(e) {
    console.log(PREFIX_MSG + 'No processes saved');
  }

  var apps = fs.readFileSync(cst.DUMP_FILE_PATH);

  (function ex(apps) {
    if (!apps[0]) return speedList();
    Satan.executeRemote('prepare', apps[0], function() {
      console.log('\n' + PREFIX_MSG + 'Process %s launched', apps[0].pm_exec_path);
      apps.shift();
      return ex(apps);
    });
    return false;
  })(JSON.parse(apps));
};

CLI.dumped = function() {
};

CLI.upstart = function(platform) {
  if (process.getuid() != 0) {
    console.log(PREFIX_MSG + 'You have to run this command as root');
    console.log(PREFIX_MSG + 'Execute the following command :');
    if (platform === undefined) platform = '';
    console.log(PREFIX_MSG + 'sudo env PATH=$PATH:' + p.dirname(process.execPath) + ' pm2 startup ' + platform);
    process.exit(ERROR_EXIT);
  }

  var script = fs.readFileSync(path.join(__dirname, STARTUP_SCRIPT));
  script = script.toString().replace(/%PM2_PATH%/g, process.mainModule.filename);
  script = script.toString().replace(/%HOME_PATH%/g, process.env.HOME);
  script = script.toString().replace(/%NODE_PATH%/g, process.execPath);


  var INIT_SCRIPT = "/etc/init.d/pm2-init.sh";
  fs.writeFileSync(INIT_SCRIPT, script);
  var exec = require('child_process').exec;

  var cmd;

  if (platform == 'centos')
    cmd = 'chmod +x ' + INIT_SCRIPT + '; chkconfig --level 2345 ' + p.basename(INIT_SCRIPT) + ' on';
  else
    cmd = 'chmod +x ' + INIT_SCRIPT + '; update-rc.d ' + p.basename(INIT_SCRIPT) + ' defaults';

  exec(cmd, function(err, stdo, stde) {
    if (err) {
      console.error(err);
      process.exit(ERROR_EXIT);
    }
    console.log(stdo);
    process.exit(SUCCESS_EXIT);
  });
};

CLI.dump = function() {
  var opts_arr = [];
  Satan.executeRemote('list', {}, function(err, list) {
    if (err) {
       console.error('Error retrieving process list: ' + err);
       process.exit(ERROR_EXIT);
     }

    function fin(err) {
      fs.writeFileSync(cst.DUMP_FILE_PATH, JSON.stringify(opts_arr));
      UX.processing.stop();
      process.exit(SUCCESS_EXIT);
    }

    (function ex(apps) {
      if (!apps[0]) return fin(null);
      delete apps[0].opts.instances;
      opts_arr.push(apps[0].opts);
      apps.shift();
      return ex(apps);
    })(list);
  });
};

CLI.web = function() {
  Satan.executeRemote('prepare', resolvePaths({
    script : p.resolve(p.dirname(module.filename), '../lib/HttpInterface.js'),
    name : 'Pm2Http' + cst.WEB_INTERFACE
  }), function() {
    console.log(PREFIX_MSG + 'Process launched');
    speedList();
  });
};


CLI.reload = function (cluster) {
  Satan.executeRemote('reload', cluster, function(err) {
    if (err) {
      console.error('Cannot reload process: ' + err);
      process.exit(ERROR_EXIT);
      return;
    }
    console.log('\n' + PREFIX_MSG + 'All processes reloaded');
    process.exit(SUCCESS_EXIT);
  });

};

CLI.restart = function(pm2_id) {
  Satan.executeRemote('list', {}, function(err, list) {
    if (err) {
       console.error('Error retrieving process list: ' + err);
       process.exit(ERROR_EXIT);
     }

    list.forEach(function(l) {
      if ((l.pm_id == pm2_id && l.status != 'stopped') ||
          (l.opts.name == pm2_id && l.status != 'stopped')) {
        try {
          process.kill(l.pid);
        } catch(e) { }
      }
      else if (l.pm_id == pm2_id && l.status == 'stopped') {
        Satan.executeRemote('startId', {id : l.pm_id}, function(err, list) {});
      }
    });
    setTimeout(function() {
      console.log('\n' + PREFIX_MSG + 'Process ' + pm2_id + ' restarted');
      process.exit(SUCCESS_EXIT);
    }, 1000);
  });
};

CLI.restartAll = function() {
  Satan.executeRemote('list', {}, function(err, list) {
    if (err) {
      console.error('Error retrieving process list: ' + err);
      process.exit(ERROR_EXIT);
    }

    list.forEach(function(l) {
      try {
        process.kill(l.pid);
      } catch(e) { }
    });
    setTimeout(function() {
      console.log('\n' + PREFIX_MSG + 'Process restarted');
      process.exit(SUCCESS_EXIT);
    }, 1000);
  });
};

CLI.stopAll = function() {
  Satan.executeRemote('stopAll', {}, function(err, list) {
    if (err) {
      console.log('\n' + PREFIX_MSG_ERR + err);
      process.exit(ERROR_EXIT);
    }
    console.log('\n');
    UX.dispAsTable(list);
    UX.processing.stop();
    process.exit(SUCCESS_EXIT);
  });
};

CLI.stopProcessName = function(name) {
  Satan.executeRemote('stopProcessName', {
    name : name
  }, function(err, list) {
    if (err) {
      console.error(err);
      process.exit(ERROR_EXIT);
    }
    console.log('\n');
    UX.dispAsTable(list);
    UX.processing.stop();
    process.exit(SUCCESS_EXIT);
  });
};

CLI.stopId = function(pm2_id) {
  Satan.executeRemote('stopId', {
    id : pm2_id
  }, function(err, list) {
    if (err) {
      console.log('\n' + PREFIX_MSG_ERR + pm2_id + ' : pm2 id not found');
      process.exit(ERROR_EXIT);
    }
    console.log('\n');
    //UX.dispAsTable(list);
    console.log(PREFIX_MSG + 'Process stopped');
    UX.processing.stop();
    process.exit(SUCCESS_EXIT);
  });
};

CLI.generateSample = function(name) {
  var sample = fs.readFileSync(path.join(__dirname, SAMPLE_FILE_PATH));
  var dt = sample.toString().replace(/VARIABLE/g, name);
  var f_name = name + '-pm2.json';

  fs.writeFileSync(path.join(process.env.PWD, f_name), dt);
  console.info('Sample generated on current folder\n%s :\n', f_name);
  console.info(dt);
  process.exit(SUCCESS_EXIT);
};

CLI.list = function() {
  Satan.executeRemote('list', {}, function(err, list) {
    if (err) {
      console.error('Error retrieving process list: ' + err);
      process.exit(ERROR_EXIT);
    }

    console.log(PREFIX_MSG, 'Process listing');
    UX.dispAsTable(list);
    console.log(PREFIX_MSG, 'PM2 log file path : ', cst.PM2_LOG_FILE_PATH, ' (type pm2 logs to see log streaming)');
    process.exit(SUCCESS_EXIT);
  });
};

CLI.jlist = function() {
  Satan.executeRemote('list', {}, function(err, list) {
    if (err) {
      console.error('Error retrieving process list: ' + err);
      process.exit(ERROR_EXIT);
    }
    console.log(list);
    process.exit(SUCCESS_EXIT);
  });
};

CLI.flush = function() {
  console.log(PREFIX_MSG + 'Flushing ' + cst.PM2_LOG_FILE_PATH);
  fs.openSync(cst.PM2_LOG_FILE_PATH, 'w');

  Satan.executeRemote('list', {}, function(err, list) {
    if (err) {
      console.error('Error retrieving process list: ' + err);
      process.exit(ERROR_EXIT);
    }
    list.forEach(function(l) {
      console.log(PREFIX_MSG + 'Flushing');
      console.log(PREFIX_MSG + l.opts.pm_out_log_path);
      console.log(PREFIX_MSG + l.opts.pm_err_log_path);

      fs.openSync(l.opts.pm_out_log_path, 'w');
      fs.openSync(l.opts.pm_err_log_path, 'w');
    });
    process.exit(SUCCESS_EXIT);
  });
};

CLI.monit = function() {
  Satan.executeRemote('list', {}, function(err, list) {
    if (err) {
      console.error('Error retrieving process list: ' + err);
      process.exit(ERROR_EXIT);
    }
    if (Object.keys(list).length == 0) {
      console.log(PREFIX_MSG + 'No online process to monitor');
      process.exit(ERROR_EXIT);
    }
    
    Monit.init(list);

    function refresh(cb) {
      Satan.executeRemote('list', {}, function(err, list) {
        if (err) {
          console.error('Error retrieving process list: ' + err);
          process.exit(ERROR_EXIT);
        }
        setTimeout(function() {
          Monit.refresh(list);
          refresh();
        }, 400);
      });
    }
    refresh();
  });
};

CLI.streamLogs = function() {
  var tdb = {};
  
  Satan.executeRemote('list', {}, function(err, list) {
    if (err) {
      console.error('Error retrieving process list: ' + err);
      process.exit(ERROR_EXIT);
    }
    list.forEach(function(l) {
      tdb[l.opts.script] = l;
    });
    Log.stream(cst.PM2_LOG_FILE_PATH, 'PM2 DAEMON');
    if (err) process.exit(ERROR_EXIT);
    for (k in tdb) {      
      if (tdb[k].opts.pm_out_log_path)
        Log.stream(tdb[k].opts.pm_out_log_path,
                   p.basename(tdb[k].opts.script, '.js') + ' out');
      if (tdb[k].opts.pm_err_log_path)
        Log.stream(tdb[k].opts.pm_err_log_path,
                   p.basename(tdb[k].opts.script, '.js') + ' err');
    }
  });
};

CLI.killDaemon = function() {
  Satan.killDaemon(function(err, res) {
    if (err) {
      console.error('Error when killing daemon');
      process.exit(ERROR_EXIT);
    }
    console.info('Daemon killed');
    process.exit(SUCCESS_EXIT);
  });
};


//
// Private methods
//
function speedList() {
  Satan.executeRemote('list', {}, function(err, list) {
    if (err) {
      console.error('Error retrieving process list: ' + err);
      process.exit(ERROR_EXIT);
    }
    UX.dispAsTable(list);
    process.exit(SUCCESS_EXIT);
  });
}

function validate(appConf) {
  var instances = appConf['instances'];
  var script    = appConf['script'];
  var cron_pattern = appConf['cron_restart'];
  
  if (instances && isNaN(parseInt(instances)) && instances != 'max') {
    console.log(PREFIX_MSG_ERR + 'Instance option must be an integer or the "max" string');
    process.exit(ERROR_EXIT);
  }

  if (cron_pattern) {
    try {
      console.log(cron_pattern);
      var cron_test = new cronJob(cron_pattern, function() {
        console.log(PREFIX_MSG + 'cron pattern for auto restart detected and valid');
        delete cron_test;
      });
    } catch(ex) {
      console.log(PREFIX_MSG_ERR + 'Cron pattern is not valid !');
      process.exit(ERROR_EXIT);
    }
  }
}

//
// Resolving path, seing if default ...
//
function resolvePaths(app) {

  validate(app);
  
  app["pm_exec_path"]    = path.resolve(process.cwd(), app.script);

  console.log(app);
  if (fs.existsSync(app.pm_exec_path) == false) {
    console.log(PREFIX_MSG_ERR + 'script not found : ' + app.pm_exec_path);
    process.exit(ERROR_EXIT);
  }

  // Set current env
  util._extend(app, process.env);

  if (app.fileOutput)
    app["pm_out_log_path"] = path.resolve(process.cwd(), app.fileOutput);
  else {
    if (!app.name) {
      console.log(PREFIX_MSG_ERR + 'You havent specified log path, please specify at least a "name" field in the JSON');
      process.exit(ERROR_EXIT);
    }
    app["pm_out_log_path"] = path.resolve(cst.DEFAULT_LOG_PATH, [app.name, '-out.log'].join(''));
    app.fileOutput = app["pm_out_log_path"];
  }

  if (app.fileError)
    app["pm_err_log_path"] = path.resolve(process.cwd(), app.fileError);
  else {
    app["pm_err_log_path"] = path.resolve(cst.DEFAULT_LOG_PATH, [app.name, '-err.log'].join(''));
    app.fileError          = app["pm_err_log_path"];
  }

  if (app.pidFile)
    app["pm_pid_path"]     = path.resolve(process.cwd(), app.pidFile);
  else {
    app["pm_pid_path"]     = path.resolve(cst.DEFAULT_PID_PATH, [app.name, '.pid'].join(''));
    app.pidFile            = app["pm_pid_path"];
  }

  return app;
}
