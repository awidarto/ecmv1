{
  "author": {
    "name": "CircuitHub",
    "email": "developers@circuithub.com",
    "url": "circuithub.com"
  },
  "name": "mail-listener",
  "description": "Mail listener library for node.js. Get notification when new email arrived.",
  "keywords": [
    "mail",
    "job",
    "imap",
    "mail listener",
    "email",
    "email parser"
  ],
  "version": "0.6.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/circuithub/mail-listener.git"
  },
  "main": "./index.js",
  "engines": {
    "node": ">=0.8.10"
  },
  "dependencies": {
    "imap": "=0.7.8",
    "mailparser": ">=0.3.4"
  },
  "devDependencies": {
    "coffee-script": ">=1.6.2"
  },
  "readme": "# Overview\n\nMail listener library for node.js. Get notification when new email arrived to inbox. Uses IMAP protocol.\n\nWe are using these libraries: [node-imap](https://github.com/mscdex/node-imap), [mailparser](https://github.com/andris9/mailparser).\n\nHeavily inspired by [this gist](https://gist.github.com/1226809).\n\n## Use\n\nInstall\n\n`npm install mail-listener`\n\n\nJavaScript Code:\n\n\n```javascript\n\nvar MailListener = require(\"mail-listener\");\n\nvar mailListener = new MailListener({\n  username: \"imap-username\",\n  password: \"imap-password\",\n  host: \"imap-host\",\n  port: 993, // imap port\n  secure: true, // use secure connection\n  mailbox: \"INBOX\", // mailbox to monitor\n  markSeen: true, // all fetched email willbe marked as seen and not fetched next time\n  fetchUnreadOnStart: true // use it only if you want to get all unread email on lib start. Default is `false`\n});\n\nmailListener.start();\n\nmailListener.on(\"server:connected\", function(){\n  console.log(\"imapConnected\");\n});\n  \nmailListener.on(\"server:error\", function(error){\n  console.log(\"imapError\", error);\n});\n\nmailListener.on(\"mail:parsed\", function(mail){\n  // do something with mail object including attachments\n  console.log(\"emailParsed\", mail.attachments);\n  // mail processing code goes here\n});\n\n// it's possible to access imap object from node-imap library for performing additional actions. E.x.\nmailListener.imap.move(:msguids, :mailboxes, function(){}) \n\n```\n\nCoffeeScript Code:\n\n\n``` coffee\n\nMailListener = require \"mail-listener\"\n\nmailListener = new MailListener\n  username: \"imap-username\"\n  password: \"imap-password\"\n  host: \"imap-host\"\n  port: 993 # imap port\n  secure: true # use secure connection\n  mailbox: \"INBOX\" # mailbox to monitor\n  markSeen: true #all fetched email willbe marked as seen and not fetched next time\n  fetchUnreadOnStart: true # use it only if you want to get all unread email on lib start. Default is `false`\n\n\n # start listener. You can stop it calling `stop method`\nmailListener.start()\n\n# subscribe to server connected event\nmailListener.on \"server:connected\", ->\n  console.log \"imap connected\"\n\n# subscribe to error events\nmailListener.on \"error\", (err) ->\n  console.log \"error happened\", err\n\n# mail arrived and was parsed by parser \nmailListener.on \"mail:parsed\", (mail) ->\n  # do something with mail object including attachments\n  console.log \"parsed email with attachment\", mail.attachments\n  ## mail processing code goes here\n\n## it's possible to access imap object from node-imap library for performing additional actions. E.x.\nmailListener.imap.move :msguids, :mailboxes, ->\n```\n\nThat's easy!\n\n\n## Contributions\n\nMail-listener is ready to use in your project. However if you need any feature tell us or fork project and implement it by yourself.\n\nWe appreciate feedback!\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011-2013 CircuitHub., https://circuithub.com/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "mail-listener@0.6.3",
  "_from": "mail-listener@"
}
